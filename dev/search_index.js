var documenterSearchIndex = {"docs":
[{"location":"equations/","page":"Equations","title":"Equations","text":"CurrentModule = Fronts","category":"page"},{"location":"equations/#Equations","page":"Equations","title":"Equations","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Equation\nDiffusionEquation\nRichardsEquation\nisindomain","category":"page"},{"location":"equations/#Fronts.Equation","page":"Equations","title":"Fronts.Equation","text":"abstract type Equation{m} end\n\nAbstract supertype for equations that can be solved with this package.\n\nType parameters\n\nm: number of spatial dimensions:\n1 for a non-radial one-dimensional equation (default);\n2 for a radial equation in polar or cylindrical coordinates;\n3 for a radial equation in spherical coordinates.\n\n\n\n\n\n","category":"type"},{"location":"equations/#Fronts.DiffusionEquation","page":"Equations","title":"Fronts.DiffusionEquation","text":"DiffusionEquation(D; symbol=:θ) <: Equation{1}\nDiffusionEquation{m}(D; symbol=:θ) <: Equation{m}\n\nNonlinear diffusion equation.\n\nArguments\n\nD: diffusivity function.\n\nKeyword arguments\n\nsymbol::Symbol=:θ: optional symbol used to represent the unknown function in the output.\n\nType parameters\n\nm::Int=1: number of spatial dimensions:\n1 for non-radial one-dimensional diffusion (default);\n2 for radial diffusion in polar or cylindrical coordinates;\n3 for radial diffusion in spherical coordinates.\n\nExamples\n\njulia> D(θ) = θ^4\nD (generic function with 1 method)\n\njulia> eq = Fronts.DiffusionEquation(D)\n∂θ/∂t = ∂(D(θ)*∂θ/∂r)/∂r\n\njulia> eq = Fronts.DiffusionEquation{2}(D)\n∂θ/∂t = 1/r*∂(r*D(θ)*∂θ/∂r)/∂r\n\njulia> eq = Fronts.DiffusionEquation{3}(D, symbol=:c)\n∂c/∂t = 1/r²*∂(r²*D(c)*∂c/∂r)/∂r\n\n\n\n\n\n","category":"type"},{"location":"equations/#Fronts.RichardsEquation","page":"Equations","title":"Fronts.RichardsEquation","text":"RichardsEquation(; C, K, symbol=:h) <: Equation{1}\nRichardsEquation{m}(; C, K, symbol=:h) <: Equation{m}\n\nHorizontal Richards equation, pressure-based formulation.\n\nKeyword arguments\n\nC: hydraulic capacity function, defined in terms of the unknown.\nK: hydraulic conductivity function, defined in terms of the unknown.\nsymbol::Symbol=:h: optional symbol used to represent the unknown function in the output.\n\nType parameters\n\nm::Int=1: number of spatial dimensions:\n1 for non-radial one-dimensional flow (default);\n2 for radial flow in polar or cylindrical coordinates;\n3 for radial flow in spherical coordinates.\n\n\n\n\n\n","category":"type"},{"location":"equations/#Fronts.isindomain","page":"Equations","title":"Fronts.isindomain","text":"isindomain(eq::Equation, val) -> Bool\n\ntrue if eq is well defined for the solution value val; false otherwise. \n\n\n\n\n\n","category":"function"},{"location":"boltzmann/","page":"Boltzmann transformation","title":"Boltzmann transformation","text":"CurrentModule = Fronts","category":"page"},{"location":"boltzmann/#The-Boltzmann-transformation","page":"Boltzmann transformation","title":"The Boltzmann transformation","text":"","category":"section"},{"location":"boltzmann/","page":"Boltzmann transformation","title":"Boltzmann transformation","text":"Lower-level API to work with the Boltzmann transformation.","category":"page"},{"location":"boltzmann/","page":"Boltzmann transformation","title":"Boltzmann transformation","text":"note: Note\nTo prevent possible name clashes, functions whose names are single characters are not exported (i.e., accessible without the Fronts prefix when using Fronts).","category":"page"},{"location":"boltzmann/","page":"Boltzmann transformation","title":"Boltzmann transformation","text":"ϕ\n∂ϕ_∂r\n∂ϕ_∂t\nr\nt\ntransform\nTransformedFunction","category":"page"},{"location":"boltzmann/#Fronts.ϕ","page":"Boltzmann transformation","title":"Fronts.ϕ","text":"ϕ(r, t)\n\nEvaluate the Boltzmann variable ϕ at position r and time t.\n\nType \\phi<tab> to obtain the ϕ symbol.\n\nThe Boltzmann variable is defined as ϕ=r/√t and makes the Boltzmann transformation possible.\n\nSee also: transform\n\n\n\n\n\n","category":"function"},{"location":"boltzmann/#Fronts.∂ϕ_∂r","page":"Boltzmann transformation","title":"Fronts.∂ϕ_∂r","text":"∂ϕ_∂r(r, t)\n\nPartial derivative of the Boltzmann variable.\n\nType \\partial<tab> to obtain the ∂ symbol; \\phi<tab> to obtain the ϕ symbol.\n\nSee also: ϕ\n\n\n\n\n\n","category":"function"},{"location":"boltzmann/#Fronts.∂ϕ_∂t","page":"Boltzmann transformation","title":"Fronts.∂ϕ_∂t","text":"∂ϕ_∂t(r, t)\n\nPartial derivative of the Boltzmann variable.\n\nType \\partial<tab> to obtain the ∂ symbol; \\phi<tab> to obtain the ϕ symbol.\n\nSee also: ϕ\n\n\n\n\n\n","category":"function"},{"location":"boltzmann/#Fronts.r","page":"Boltzmann transformation","title":"Fronts.r","text":"r(ϕ, t)\n\nConvert back from the Boltzmann variable to r.\n\nSee also: ϕ\n\n\n\n\n\n","category":"function"},{"location":"boltzmann/#Fronts.t","page":"Boltzmann transformation","title":"Fronts.t","text":"t(ϕ, r)\n\nConvert back from the Boltzmann variable to t.\n\nSee also: ϕ\n\n\n\n\n\n","category":"function"},{"location":"boltzmann/#Fronts.transform","page":"Boltzmann transformation","title":"Fronts.transform","text":"transform(r, t)\n\nSame as ϕ(r,t).\n\nSee also: ϕ\n\n\n\n\n\ntransform(eq::Equation) -> DifferentialEquations.ODEFunction\n\nTransform eq into an ordinary differential equation (ODE) defined in terms of the Boltzmann variable ϕ.\n\nReturns an ODE with independent variable ϕ and two components, where the first is the solution itself and the second component is the ϕ-derivative of the solution. The ODE is optimized for components stored in StaticArrays.SVectors.\n\nSee also: DifferentialEquations, StaticArrays.SVector\n\n\n\n\n\ntransform(prob::CauchyProblem) -> DifferentialEquations.ODEProblem\n\nTransform prob into an ODE problem in terms of ϕ. The ODE problem is set up to terminate automatically (.retcode === :Terminated) when the steady state is reached.\n\nSee also: DifferentialEquations\n\n\n\n\n\n","category":"function"},{"location":"boltzmann/#Fronts.TransformedFunction","page":"Boltzmann transformation","title":"Fronts.TransformedFunction","text":"TransformedFunction\n\nAbstract type for functions of the Boltzmann variable ϕ.\n\nEvery subtype of TransformedFunction gets access to the following methods:\n\n(::TransformedFunction)(r, t)\nd_dϕ(::TransformedFunction, r, t)\n∂_∂r(::TransformedFunction, r, t)\n∂_∂t(::TransformedFunction, r, t)\n\nImplementation\n\nIn order to access the previous methods, a type T <: TransformedFunction must define these methods:\n\n(::T)(ϕ)\nd_dϕ(::T, ϕ)\n\n\n\n\n\n","category":"type"},{"location":"problems/","page":"Problems","title":"Problems","text":"CurrentModule = Fronts","category":"page"},{"location":"problems/#Problems","page":"Problems","title":"Problems","text":"","category":"section"},{"location":"problems/","page":"Problems","title":"Problems","text":"DirichletProblem\nFlowrateProblem\nCauchyProblem\nmonotonicity","category":"page"},{"location":"problems/#Fronts.DirichletProblem","page":"Problems","title":"Fronts.DirichletProblem","text":"DirichletProblem(eq; i=<initial value>, b=<boundary value>, ϕb=0)\nDirichletProblem(D; i=<initial value>, b=<boundary value>, ϕb=0)\n\nSemi-infinite problem with a Dirichlet boundary condition.\n\nArguments\n\neq::Equation: governing equation.\nD: diffusivity function. Shortcut for DirichletProblem(DiffusionEquation(D), ...).\n\nKeyword arguments\n\ni: initial value.\nb: imposed boundary value.\nϕb=0 (\\phi<tab>b): boundary constant for an optional moving boundary.\n\nAt time t, the boundary is located at ϕb*√t. Must be positive if eq is radial.\n\nExamples\n\njulia> D(θ) = θ^4\nD (generic function with 1 method)\n\njulia> prob = Fronts.DirichletProblem(D, i=1, b=2)\n⎧ ∂θ/∂t = ∂(D(θ)*∂θ/∂r)/∂r, r>0,t>0\n⎨ θ(r,0) = 1, r>0\n⎩ θ(0,t) = 2, t>0\n\nSee also: Equation\n\n\n\n\n\n","category":"type"},{"location":"problems/#Fronts.FlowrateProblem","page":"Problems","title":"Fronts.FlowrateProblem","text":"FlowrateProblem(eq; i=<initial value>, Qb=<boundary flowrate>, angle=2π, height=1, ϕb=0)\n\nSemi-infinite radial (polar/cylindrical) problem with an imposed-flowrate boundary condition.\n\nArguments\n\neq::Equation{2}: governing equation.\n\nKeyword arguments\n\ni: initial value.\nQb: imposed boundary flowrate.\nangle=2π: total angle covered by the domain.\nheight=1: domain height.\nϕb=0 (\\phi<tab>b): boundary constant for an optional moving boundary.\n\nAt time t, the boundary is located at ϕb*√t.\n\nExamples\n\njulia> D(θ) = θ^4\nD (generic function with 1 method)\n\njulia> eq = Fronts.DiffusionEquation{2}(D)\n∂θ/∂t = 1/r*∂(r*D(θ)*∂θ/∂r)/∂r\n\njulia> prob = Fronts.FlowrateProblem(eq, i=1, Qb=1)\n⎧ ∂θ/∂t = 1/r*∂(r*D(θ)*∂θ/∂r)/∂r, r>0,t>0\n⎨ θ(r,0) = 1, r>0\n⎩ Qb(0,t) = 1, t>0\n\nSee also: Equation\n\n\n\n\n\n","category":"type"},{"location":"problems/#Fronts.CauchyProblem","page":"Problems","title":"Fronts.CauchyProblem","text":"CauchyProblem(eq; b=<boundary value>, d_dϕb=<boundary ϕ-derivative>, ϕb=0)\nCauchyProblem(D; b=<boundary value>, d_dϕb=<boundary ϕ-derivative>, ϕb=0)\n\nSemi-infinite problem with a Cauchy boundary condition (and unknown initial condition).\n\nArguments\n\neq::Equation: governing equation.\nD: diffusivity function. Shortcut for CauchyProblem(DiffusionEquation(D), ...).\n\nKeyword arguments\n\nb: imposed boundary value.\nd_dϕb: imposed value of the ϕ-derivative of the solution at the boundary, where ϕ is the Boltzmann variable.\n\nThis value is equivalent to √t*∂_∂r(<solution>, :b, t) at any time t>0.\n\nϕb=0 (\\phi<tab>b): boundary constant for an optional moving boundary.\n\nAt time t, the boundary is located at ϕb*√t. Must be positive if eq is radial.\n\nExamples\n\njulia> D(θ) = θ^4\nD (generic function with 1 method)\n\njulia> prob = Fronts.CauchyProblem(D, b=2, d_dϕb=-0.1)\n⎧ ∂θ/∂t = ∂(D(θ)*∂θ/∂r)/∂r, r>0,t>0\n⎨ θ(0,t) = 2, t>0\n⎩ √t*∂θ/∂r(0,t) = -0.1, t>0\n\nSee also: Equation\n\n\n\n\n\n","category":"type"},{"location":"problems/#Fronts.monotonicity","page":"Problems","title":"Fronts.monotonicity","text":"monotonicity(prob) -> Int\n\nWhether the solution to prob must be decreasing (-1), constant (0) or increasing (+1) in r.\n\n\n\n\n\n","category":"function"},{"location":"solvers/","page":"Solving","title":"Solving","text":"CurrentModule = Fronts","category":"page"},{"location":"solvers/#Solving-problems","page":"Solving","title":"Solving problems","text":"","category":"section"},{"location":"solvers/","page":"Solving","title":"Solving","text":"solve\nSolvingError","category":"page"},{"location":"solvers/#Fronts.solve","page":"Solving","title":"Fronts.solve","text":"solve(prob::DirichletProblem[; itol, maxiter, d_dϕb_hint]) -> Solution\nsolve(prob::FlowrateProblem[; itol, ϕbtol, maxiter, b_hint]) -> Solution\nsolve(prob::CauchyProblem) -> Solution\n\nSolve the problem prob.\n\nKeyword arguments\n\nitol=1e-3: absolute tolerance for the initial condition.\nϕbtol=1e-6: maximum tolerance for ϕb. Allows solving FlowrateProblems with boundaries at r=0.\nmaxiter=100: maximum number of iterations.\nd_dϕb_hint, b_hint: optional hints for the algorithms.\n\nType \\phi<tab> to obtain the ϕ symbol.\n\nExceptions\n\nThis function throws an SolvingError if an acceptable solution is not found (within the maximum number of iterations, if applicable). However, in situations where solve can determine that the problem is \"unsolvable\" before the attempt to solve it, it will signal this by throwing a DomainError instead. Other invalid argument values will raise ArgumentErrors.\n\nSee also: Solution, SolvingError\n\n\n\n\n\n","category":"function"},{"location":"solvers/#Fronts.SolvingError","page":"Solving","title":"Fronts.SolvingError","text":"Exception thrown when solve fails to find a solution.\n\n\n\n\n\n","category":"type"},{"location":"solution/","page":"Solutions","title":"Solutions","text":"CurrentModule = Fronts","category":"page"},{"location":"solution/#Evaluating-solutions","page":"Solutions","title":"Evaluating solutions","text":"","category":"section"},{"location":"solution/","page":"Solutions","title":"Solutions","text":"Solution\n∂_∂r\n∂_∂t\nflux\nd_dϕ\nrb","category":"page"},{"location":"solution/#Fronts.Solution","page":"Solutions","title":"Fronts.Solution","text":"Solution to a problem.\n\n(::Solution)(r, t)\n(::Solution)(ϕ)\n\nEvaluate the solution.\n\nProperties\n\ni: initial value.\nb: boundary value.\nd_dϕb: ϕ-derivative at the boundary, where ϕ is the Boltzmann variable.\nϕb: boundary constant. See also rb.\nϕi: for ϕ≥ϕi, the solution evaluates to the initial value.\niterations: number of iterations needed to find this solution.\n\nType \\phi<tab> to obtain the ϕ symbol.\n\n\n\n\n\n","category":"type"},{"location":"solution/#Fronts.∂_∂r","page":"Solutions","title":"Fronts.∂_∂r","text":"∂_∂r(::Solution, r, t)\n\nSpatial derivative of the solution.\n\nType \\partial<tab> to obtain the ∂ symbol.\n\n\n\n∂_∂r(::Solution, :b, t)\n\nSpatial derivative of the solution at the boundary.\n\n\n\n\n\n","category":"function"},{"location":"solution/#Fronts.∂_∂t","page":"Solutions","title":"Fronts.∂_∂t","text":"∂_∂t(::Solution, r, t)\n\nTime derivative of the solution sol.\n\nType \\partial<tab> to obtain the ∂ symbol.\n\n\n\n∂_∂t(::Solution, :b, t)\n\nTime derivative of the solution at the boundary.\n\n\n\n\n\n","category":"function"},{"location":"solution/#Fronts.flux","page":"Solutions","title":"Fronts.flux","text":"flux(::Solution, r, t)\n\nDiffusive flux of the solution.\n\n\n\n\n\nflux(::Solution, :b, t)\n\nDiffusive flux of the solution at the boundary.\n\n\n\n\n\n","category":"function"},{"location":"solution/#Fronts.d_dϕ","page":"Solutions","title":"Fronts.d_dϕ","text":"d_dϕ(::Solution, r, t)\nd_dϕ(::Solution, ϕ)\n\nϕ-derivative of the solution, where ϕ is the Boltzmann variable.\n\nType \\phi<tab> to obtain the ϕ symbol.\n\nSee also: ϕ\n\n\n\n\n\n","category":"function"},{"location":"solution/#Fronts.rb","page":"Solutions","title":"Fronts.rb","text":"rb(::Solution, t)\n\nLocation of the boundary in the solution at time t, equal to ϕb*√t.\n\n\n\n\n\n","category":"function"},{"location":"D/","page":"Diffusivity functions","title":"Diffusivity functions","text":"CurrentModule = Fronts.D","category":"page"},{"location":"D/#Fronts.D-module:-diffusivity-functions","page":"Diffusivity functions","title":"Fronts.D module: diffusivity functions","text":"","category":"section"},{"location":"D/","page":"Diffusivity functions","title":"Diffusivity functions","text":"Obtain common diffusivity functions to be used in problems.","category":"page"},{"location":"D/","page":"Diffusivity functions","title":"Diffusivity functions","text":"brookscorey\nvangenuchten\nrichards","category":"page"},{"location":"D/#Fronts.D.brookscorey","page":"Diffusivity functions","title":"Fronts.D.brookscorey","text":"brookscorey(; n, Ks=1, l=1, α=1, θr=0, θs=1) -> Function\nbrookscorey(; n, k, l=1, α=1, θr=0, θs=1, ν=1e-6, g=9.81) -> Function\n\nCreate a Brooks and Corey diffusivity function.\n\nGiven the saturated hydraulic conductivity K_S and parameters alpha, n, l, theta_r and theta_s, the Van Genuchten moisture diffusivity function D is defined as:\n\nD(theta) = fracK_S Theta^1n + l + 1alpha n (theta_s-theta_r)\n\nwhere:\n\nTheta = fractheta-theta_rtheta_s-theta_r\n\nand theta is moisture content.\n\nKeyword arguments\n\nn: n parameter.\nKs=1: saturated hydraulic conductivity K_S.\nk: intrinsic permeability.\nl=1: l parameter.\nα=1 (\\alpha<tab>): α parameter.\nθr=0 (\\theta<tab>r): residual moisture content theta_r.\nθs=1 (\\theta<tab>s): moisture content when saturated theta_s.\nν=1e-6 (\\nu<tab>): kinematic viscosity.\ng=9.81: magnitude of the gravitational acceleration.\n\nReferences\n\nBROOKS, R.; COREY, T. Hydraulic properties of porous media. Hydrology Papers, Colorado State University, 1964, vol. 24, p. 37.\n\n\n\n\n\n","category":"function"},{"location":"D/#Fronts.D.vangenuchten","page":"Diffusivity functions","title":"Fronts.D.vangenuchten","text":"vangenuchten(; n, Ks=1, l=0.5, α=1, θr=0, θs=1) -> Function\nvangenuchten(; m, Ks=1, l=0.5, α=1, θr=0, θs=1) -> Function\nvangenuchten(; n, k, l=0.5, α=1, θr=0, θs=1, ν=1e-6, g=9.81) -> Function\nvangenuchten(; m, k, l=0.5, α=1, θr=0, θs=1, ν=1e-6, g=9.81) -> Function\n\nCreate a Van Genuchten diffusivity function.\n\nGiven the saturated hydraulic conductivity K_S and parameters alpha, m, l, theta_r and theta_s, the Van Genuchten moisture diffusivity function D is defined as:\n\nD(theta)=frac(1-m)K_Salpha m (theta_s-theta_r)     Theta^l-frac1mleft((1-Theta^frac1m)^-m +     (1-Theta^frac1m)^m - 2 right)\n\nwhere:\n\nTheta = fractheta-theta_rtheta_s-theta_r\n\nand theta is moisture content.\n\nIn common usage, the m parameter is replaced with an n parameter so that m=1-1n. This function supports either parameter.\n\nKeyword arguments\n\nn: n parameter.\nm: m parameter.\nKs=1: saturated hydraulic conductivity K_S.\nk: intrinsic permeability.\nl=0.5: l parameter.\nα=1  (\\alpha<tab>): α parameter.\nθr=0 (\\theta<tab>r): residual moisture content theta_r.\nθs=1 (\\theta<tab>s): moisture content when saturated theta_s.\nν=1e-6 (\\nu<tab>): kinematic viscosity.\ng=9.81: magnitude of the gravitational acceleration.\n\nReferences\n\nVAN GENUCHTEN, M. Th. A closed-form equation for predicting the hydraulic conductivity of unsaturated soils. Soil Science Society of America Journal, 1980, vol. 44, no 5, p. 892-898.\n\n\n\n\n\n","category":"function"},{"location":"D/#Fronts.D.richards","page":"Diffusivity functions","title":"Fronts.D.richards","text":"richards(; C, kr, Ks=1) -> Function\nrichards(; C, kr, k, ν=1e-6, g=9.81) -> Function\n\nReturn a moisture diffusivity function for a Richards equation problem.\n\nGiven Ks and the functions C and kr, returns the function D(θ) = Ks*kr(θ)/C(θ).\n\nKeyword arguments\n\nC: capillary capacity function.\nkr: relative permeability function.\nKs=1: saturated hydraulic conductivity.\nk: intrinsic permeability.\nν=1e-6 (\\nu<tab>): kinematic viscosity.\ng=9.81: magnitude of the gravitational acceleration.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Fronts","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation of the Fronts package for Julia. ","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"equations.md\", \"problems.md\", \"solvers.md\", \"solution.md\", \"boltzmann.md\", \"inverse.md\", \"D.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nDocumentation for the Python version of Fronts is available separately.","category":"page"},{"location":"inverse/","page":"Inverse problems","title":"Inverse problems","text":"CurrentModule = Fronts","category":"page"},{"location":"inverse/#Inverse-problems","page":"Inverse problems","title":"Inverse problems","text":"","category":"section"},{"location":"inverse/","page":"Inverse problems","title":"Inverse problems","text":"inverse","category":"page"},{"location":"inverse/#Fronts.inverse","page":"Inverse problems","title":"Fronts.inverse","text":"inverse(ϕ, θ) -> Function\n\nExtract a diffusivity function D from a solution to a semi-infinite one-dimensional nonlinear diffusion problem, where the solution is given as a set of discrete points.\n\nInterpolates the given solution with a PCHIP monotonic spline and uses the Bruce and Klute method to reconstruct D.\n\nDue to the method used for interpolation, D will be continuous but will have discontinuous derivatives.\n\nArguments\n\nϕ::AbstractVector: values of the Boltzmann variable. See ϕ.\nθ::AbstractVector: solution values at each point in ϕ.\n\nReferences\n\nBRUCE, R. R.; KLUTE, A. The measurement of soil moisture diffusivity. Soil Science Society of America Journal, 1956, vol. 20, no 4, p. 458-462.\n\n\n\n\n\n","category":"function"}]
}
